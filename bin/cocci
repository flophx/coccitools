#!/usr/bin/env python

# This file is part of Coccitools.

# Copyright (C) 2010  Florian MANY

# Coccitools is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Coccitools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Coccitools.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, py_compile

homepath =  os.path.abspath(__file__).split('bin')[0]
libpath =  homepath + "lib/python"
sys.path.append(libpath)
# import coccitools,
import configuration, utils
import ConfigParser, argparse
import coccitools

## The main command 'cocci' is the dispatcher of sub-commands for coccitools.
#
# This function checks if the sub-command exists and executes the corresponding subcommand. Otherwise, the program aborts .
def main():

    #
    config = ConfigParser.ConfigParser()
    config.read(homepath + 'coccitools.conf')

    #
    if len(sys.argv) == 1:
        _help()
        sys.exit(2)
    elif sys.argv[1] == '-h' or  sys.argv[1] == '--help':
        _help()
        sys.exit(2)
    elif sys.argv[1] == '-v' or  sys.argv[1] == '--version':
        print 'coccitools version 0.1'
        sys.exit(2)
    else:
        try:
            command = getattr(coccitools, sys.argv[1] )
            if callable(command):
                command(sys.argv[2:], openConfig() )
        except AttributeError:
            print "%s is not a coccitools-command" %  sys.argv[1]
            sys.exit(2)

## Internal function that reads the configuration file "coccitools.conf"
#
# @return ConfigParser object
def openConfig():
    config = ConfigParser.ConfigParser()
    config.read(homepath + 'coccitools.conf')
    return config

## Internal function that checks the existence of the configuration file "coccitools.conf"
#
# @param path the installation path of coccitools
def checkConfigFile(path):
    #
    if not os.path.isfile(path + "coccitools.conf"):
        print "No coccitools config file. Create one."
        configuration.initConfig(path)
##
#
#
def checkCoccitoolsCommand(path):

    # Get available coccitools commands
    coccitools_path = path + '/coccitools/'
    init_coccitools_path = coccitools_path + '__init__.py'
    # cinit_coccitools_path = coccitools_path + '__init__.pyc'

    list_commands = utils.listDirectory(coccitools_path)

    filter_list_files = []
    for command in list_commands:
        if command.endswith('~') or command.endswith('.pyc') or command.endswith('__.py') or command.endswith('__.pyc') :
           filter_list_files.append(command)

    for ignore_files in filter_list_files:
        list_commands.remove(ignore_files
                             )
    list_commands.sort()
    # Get __init__.py entries
    fd = open(init_coccitools_path, 'r')
    list_import = []
    for line in fd:
        if line.startswith('from'):
            list_import.append(line.strip())
    fd.close()

    # Check entries
    for command in list_commands:
        script_name = (os.path.basename(command)).split('.py')[0]
        command_name = script_name.split('cocci_')[1]

        import_line = 'from ' + script_name + ' import ' + command_name

        isModified = False
        try:
            index_list = list_import.index(import_line)
        except ValueError:
           print "%s does not exist, will be added" % command_name
           fd = open(init_coccitools_path, 'a+')
           fd.write(import_line + '\n')
           fd.close()
           isModified=True

    # Reload Coccitools module to take into account the updates
    if isModified:
        reload(coccitools)


def _help():
    print 'usage: cocci -v/--version |COMMAND [ARGS] -h/--help'
    print "\nThe list of coccitools command is:"
    fd = open(libpath+ '/coccitools/__init__.py', 'r')
    list_script = []
    for line in fd:
        if line.startswith('from'):
            script_name=line.split(' ')[1]
            list_script.append(script_name)
    fd.close()

    list_script.sort()
    for script in list_script:
        submodule = __import__('coccitools.' + script)
        try:
            print eval('coccitools.' + script  + '.usage()')
        except AttributeError:
            print 'Description of %s command not found' % script

    print "\n Use 'cocci COMMAND -h/--help' to have more informations"

# ============================
# Start Program
# ============================
if __name__ == "__main__":
    checkConfigFile(homepath)
    checkCoccitoolsCommand(libpath)
    main()
